#!/bin/bash

# --- Configura√ß√£o ---
PROJECT_NAME="uhimws-project"
GITHUB_USER="seu-usuario-github" # Substitua pelo seu usu√°rio ou organiza√ß√£o
LICENSE_YEAR=$(date +%Y)
LICENSE_OWNER="Humberto Luz Oliveira e Colaboradores" # Substitua se necess√°rio

# --- In√≠cio do Script ---
echo "üöÄ Iniciando a cria√ß√£o da estrutura para o projeto: $PROJECT_NAME"

# 1. Cria o diret√≥rio principal do projeto e entra nele
if [ -d "$PROJECT_NAME" ]; then
    echo "‚ö†Ô∏è  O diret√≥rio '$PROJECT_NAME' j√° existe. Abortando para evitar sobrescrever."
    exit 1
fi
mkdir "$PROJECT_NAME"
cd "$PROJECT_NAME"

# 2. Cria a estrutura de pastas
echo "üìÇ Criando a estrutura de diret√≥rios..."
mkdir -p analysis/{notebooks,scripts} \
         dashboard \
         data/{external,processed,raw} \
         docs/{assets,methodology,reports,scientific_basis} \
         firmware/{lib,src} \
         hardware \
         data_pipeline

# 3. Cria arquivos .gitkeep para que o Git rastreie pastas vazias
echo "‚ú® Adicionando arquivos .gitkeep para rastreamento de pastas vazias..."
touch analysis/notebooks/.gitkeep \
      analysis/scripts/.gitkeep \
      dashboard/.gitkeep \
      data/external/.gitkeep \
      data/processed/.gitkeep \
      data/raw/.gitkeep \
      docs/assets/.gitkeep \
      docs/methodology/.gitkeep \
      docs/reports/.gitkeep \
      docs/scientific_basis/.gitkeep \
      firmware/lib/.gitkeep \
      firmware/src/.gitkeep \
      hardware/.gitkeep \
      data_pipeline/.gitkeep

# 4. Cria o arquivo .gitignore
echo "üìÑ Criando o arquivo .gitignore..."
cat << EOF > .gitignore
# Ambientes virtuais e depend√™ncias do Python
__pycache__/
*.pyc
venv/
.env
env/

# Arquivos de dados (n√£o devem ser versionados)
data/raw/
data/external/
data/processed/
*.csv
*.xlsx
*.parquet

# Configura√ß√µes de IDEs e editores
.vscode/
.idea/

# Depend√™ncias e builds do PlatformIO/Arduino
.pio/
.ionide/
firmware/.pio/
firmware/build/
*.o
*.a
*.bin
*.elf
*.hex

# Arquivos de sistema operacional
.DS_Store
Thumbs.db
EOF

# 5. Cria o arquivo README.md
echo "üìÑ Criando o arquivo README.md..."
cat << EOF > README.md
# UHIMWS - Esta√ß√£o Meteorol√≥gica para Ilhas de Calor Urbano

![Status do Projeto](https://img.shields.io/badge/status-em--desenvolvimento-yellowgreen)
![Licen√ßa](https://img.shields.io/badge/license-MIT-blue)

Reposit√≥rio oficial do projeto UHIMWS, uma esta√ß√£o meteorol√≥gica de baixo custo baseada em ESP32, projetada para o monitoramento de microclimas e o estudo de ilhas de calor urbanas.

## üéØ Sobre o Projeto

Este projeto visa desenvolver um sistema robusto e preciso para coleta de dados meteorol√≥gicos. A fase atual foca na valida√ß√£o e sele√ß√£o rigorosa de sensores para garantir a qualidade dos dados, um requisito fundamental para futuras publica√ß√µes cient√≠ficas e um potencial registro de patente.

- **Hardware:** ESP32, m√∫ltiplos sensores de temperatura, umidade, press√£o, etc.
- **Pipeline de Dados:** MQTT ‚Üí InfluxDB ‚Üí Grafana
- **Metodologia:** An√°lise de Dados Intr√≠nseca (ADI) e Extr√≠nseca (ADE) para valida√ß√£o de componentes.

## üìÇ Estrutura do Reposit√≥rio

- **/analysis**: Scripts e notebooks para an√°lise de dados (Python/R).
- **/dashboard**: C√≥digo-fonte do dashboard de visualiza√ß√£o de resultados.
- **/data**: Datasets (gerenciados via .gitignore).
- **/docs**: Documenta√ß√£o completa do projeto.
- **/firmware**: C√≥digo-fonte do firmware para o ESP32.
- **/hardware**: Esquemas el√©tricos, design de PCB e lista de materiais (BOM).
- **/data_pipeline**: Arquivos de configura√ß√£o para a infraestrutura de dados (Docker, etc.).

## üöÄ Como Come√ßar

Clone o reposit√≥rio e siga as instru√ß√µes espec√≠ficas em cada pasta.

## ü§ù Contribui√ß√£o

Por favor, crie uma nova branch para cada funcionalidade e envie um Pull Request para revis√£o.

## üë• Autores

- **Humberto Luz Oliveira** - _L√≠der do Projeto_
- [Adicionar outros membros da equipe aqui]
EOF

# 6. Cria o arquivo de Licen√ßa (MIT)
echo "üìÑ Criando o arquivo LICENSE..."
cat << EOF > LICENSE
MIT License

Copyright (c) $LICENSE_YEAR $LICENSE_OWNER

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

# 7. Inicializa o reposit√≥rio Git e faz o primeiro commit
echo "‚öôÔ∏è  Inicializando o reposit√≥rio Git e realizando o primeiro commit..."
git init
git add .
git commit -m "feat: ‚ú® Initial project structure and documentation"

echo ""
echo "‚úÖ Sucesso! O reposit√≥rio local '$PROJECT_NAME' foi criado e configurado."
echo "‚û°Ô∏è  Pr√≥ximos passos:"
echo "   1. Crie um novo reposit√≥rio VAZIO no GitHub chamado '$PROJECT_NAME'."
echo "   2. No diret√≥rio '$PROJECT_NAME', execute os seguintes comandos:"
echo "      git remote add origin https://github.com/$GITHUB_USER/$PROJECT_NAME.git"
echo "      git branch -M main"
echo "      git push -u origin main"
